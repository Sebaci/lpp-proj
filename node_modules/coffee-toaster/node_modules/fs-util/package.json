{
  "name": "fs-util",
  "version": "0.3.7",
  "author": {
    "name": "Anderson Arboleya",
    "email": "anderson@arboleya.me"
  },
  "description": "Incremental utilities for NodeJS File System API.",
  "keywords": [
    "fs",
    "util"
  ],
  "main": "lib/fs-util",
  "directories": {
    "lib": "./lib",
    "test": "./tests"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/serpentem/fs-util"
  },
  "engines": {
    "node": "0.10.x"
  },
  "devDependencies": {
    "coffee-script": "1.6.x",
    "mocha": "1.7.x",
    "should": "1.2.x"
  },
  "readme": "Incremental utilities for NodeJS File System API.\n\n[![Build Status](https://secure.travis-ci.org/serpentem/fs-util.png)](http://travis-ci.org/serpentem/fs-util)\n> Version 0.3.7\n\n# Compatibility\n\n* Linux\n* MacOSX\n* Windows\n\n# Documentation\n\n- [FS Watcher](#fs-watcher)\n  - [Usage](#fs-watcher-usage)\n  - [Events](#fs-watcher-events)\n  - [Example](#fs-watcher-example)\n      - [Callback](#fs-watcher-callback)\n      - [Method](#fs-watcher-method)\n- [FS Tools](#fs-tools)\n  - [Usage](#fs-tools-usage)\n\n# Setting up\n\n- [Installing](#installing)\n  - [Developing](#developing)\n  - [Building](#building)\n  - [Watching](#watching)\n  - [Testing](#testing)\n\n----\n<a name=\"fs-watcher\"/>\n# FS Watcher\n\nProvides the ability to watch an entire _*tree*_ of `dirs` and `files`.\n\n<a name=\"fs-watcher-usage\"/>\n## Usage\n\n````coffeescript\nfsu = require 'fs-util'\nwatcher = fsu.watch [desired_path], [regex_pattern], [recursive_notifications]\n````\n\n> `desired_path`\n\nThe path to the `dir` or `file` you wanna watch.\n\n> `regex_pattern`\n\nThe regex to filter only the files you wanna watch.\n\n> `recursive_notifications`\n\nIf `true` notifications will be fired for all files. If you delete a `dir`\nthat has many `sub dirs` and `files`, an `unwatch` and `delete` events will be\ndispatched for all the children `dirs` and `files` as well.\n\nIf `false`, only one event will be dispatched for the `dir` that was actually\ndeleted. It can save you an overhead of events popping up when a `dir` with\nbig ammount of `subdirs` and `files` is deleted.\n\n<a name=\"fs-watcher-events\"/>\n## Events\n * watch\n * unwatch\n * create\n * change\n * delete\n\n<a name=\"fs-watcher-example\"/>\n## Example\n\nBellow is a very basic usage example that can be found in the\n[examples](https://github.com/serpentem/fs-util/tree/master/examples) folder.\n\n````coffeescript\nfsu = require 'fs-util'\nwatcher = fsu.watch 'desired/path', /.coffee$/m, true\nwatcher.on 'watch', (f)-> console.log 'WATCHED ' + [f.type, f.location]\nwatcher.on 'unwatch', (f)-> console.log 'UNWATCHED ' + [f.type, f.location]\nwatcher.on 'create', (f)-> console.log 'CREATED ' + [f.type, f.location]\nwatcher.on 'change', (f)-> console.log 'CHANGED ' + [f.type, f.location]\nwatcher.on 'delete', (f)-> console.log 'DELETED ' + [f.type, f.location]\n\nwatcher.close()\n````\n\n<a name=\"fs-watcher-callback\"/>\n### Callback's argument\n\nAll callbacks receives only *one* argument which is the related `[f]ile` to\nthe event.\n\nIt has the following properties:\n\n> [f].location\n\nFullpath `location` of the item.\n\n>  [f].type\n\nItem `type`, can be `dir` or `file`.\n\n>  [f].prev\n\nLast stat of the file, it's an instance of [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats).\n\n>  [f].curr\n\nCurrent stat of the file, it's an instance of [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats).\n\n>  [f].tree\n\nThe complete `tree` of subitems (`files` and `dirs`) under that point.\n\n* _Applies only when `f.type` is `dir`_\n\n<a name=\"fs-watcher-method\"/>\n### Watcher's method\n\nBesides all the Event Emiter inherited methods, the `watcher` class has one more:\n\n> [watcher].close()\n\nWhen called, this method will forcely close all persistent watcher's process and\nremoves all previously added listeners. Every file and folder is `unwatched`,\nevents will pop normally for them, and after that the instance becomes useless.\n\n----\n<a name=\"fs-tools\"/>\n# FS Tools\n\nProvides functionalities such as `rm_rf`, `cp_r`, `mkdir_p`, `find` and `ls`.\n\n<a name=\"fs-tools-usage\"/>\n## Usage\n\n````coffeescript\nfsu = require 'fs-util'\nfsu.mkdirp [dir_path]\nfsu.touch [file_path], [encoding='utf-8']\nfsu.copy [from_path], [to_path]\nfsu.find [path], [regex_pattern], [include_dirs]\nfsu.ls [path]\nfsu.rm_rm [path]\n````\n\n> `*path`\n\nAbsolute or relative `paths` are accepted, you take care of your things.\n\n> `encoding`\n\nThe `file` encoding when `touching` it.\n\n> `regex_pattern`\n\nYour search pattern, i.e. `/.coffee$/m`.\n\n> `include_dirs`\n\nWhen `true` will include the `dirs` in the search, otherwise only `files`.\n\n----\n<a name=\"installing\"/>\n# Installing\n\nRemembers that you need to install fs-util locally in order to use it as a LIB.\nYou will need to `require 'fs-util` in you script, there's no reason to install\nit globally with `-g`, `fs-util` won't work directly in the command line.\n\nAt least for now.\n\n````bash\nnpm install fs-util\n````\n\n<a name=\"developing\"/>\n## Developing\n\nIn order to contribute you will need to `fork`, `clone` and initialize the env.\n\n````bash\ngit clone git@github.com:[username]/fs-util\ncd fs-util && npm install\n````\n\n<a name=\"building\"/>\n### Building\n\nBuild the `src/*.coffee` files to `lib/*.js`.\n\n````bash\nmake build\n````\n\n<a name=\"watching\"/>\n### Watching\n\nContinuously building in `watch` mode.\n\n````bash\nmake watch\n````\n\n<a name=\"testing\"/>\n### Testing\n\nRunning tests suite.\n\n````bash\nmake test\n````",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/serpentem/fs-util/issues"
  },
  "_id": "fs-util@0.3.7",
  "dist": {
    "shasum": "2cef1ee3c904b63fae3624409f37f56caa03e1f4"
  },
  "_from": "fs-util@0.3.7",
  "_resolved": "https://registry.npmjs.org/fs-util/-/fs-util-0.3.7.tgz"
}
