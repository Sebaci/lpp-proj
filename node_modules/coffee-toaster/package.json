{
  "name": "coffee-toaster",
  "version": "0.6.13",
  "author": {
    "name": "Anderson Arboleya",
    "email": "anderson@arboleya.me"
  },
  "description": "Minimalist build system for CoffeeScript.",
  "keywords": [
    "coffeescript",
    "build",
    "namespace",
    "tool"
  ],
  "main": "./lib/toaster",
  "directories": {
    "lib": "./lib/"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/serpentem/coffee-toaster"
  },
  "bin": {
    "toaster": "./bin/toaster"
  },
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "fs-util": "0.3.7",
    "coffee-script": "1.3.x",
    "uglify-js": "1.1.x",
    "optimist": "0.2.x",
    "colors": "0.5.x",
    "vows": "0.7.x",
    "growl": "1.2.x"
  },
  "optionalDependencies": {
    "growl": "1.2.x"
  },
  "readme": "![Coffee Toaster](http://github.com/serpentem/coffee-toaster/blob/0.5.0/images/toaster.png?raw=true)\n\nMinimalist build system for CoffeeScript.\n> Version 0.6.13\n\n[![Build Status](https://secure.travis-ci.org/serpentem/coffee-toaster.png)](http://travis-ci.org/serpentem/coffee-toaster)\n\n# Features\n\n* Inheritance support across multiples files for the lazy\n* Vendors management\n* Automagically packaging system with namespaces\n* Micro build routines\n* Exports aliases\n* Broken and circular-loop dependencies validation\n* Live syntax-check\n* Growl support\n* Debug Mode\n* Minify support\n* Scaffolding routines\n\n# Issues\nDo not hesitate to open a feature request or a bug report.\n> https://github.com/serpentem/coffee-toaster/issues\n\n# Mailing List\nA place to talk about it, ask anything, get in touch. Luckily you'll be answered\nsooner than later.\n\n> https://groups.google.com/group/coffee-toaster\n\n*NOTE: The list is `active` and `maintained`, though the low activity. So don't\nbe shy.*\n\n# About\n\nMinimalist build system for CoffeeScript, made for those who dare to use class\ndefinitions in CoffeeScript while being able to easily inherit from external\nfiles. The system is powered with import directives that uses wildcards\nfacilities, exposed scopes, excluded files filter options and a packaging system\nthat can inject your folders-as-namespaces to all your classes based on where\nthey are under your src folder.\n\nCoffeeToaster was created initially as a base for creating the\n[Theoricus Framework](https://github.com/serpentem/theoricus).\n\n\n# Docs\n\n - [Installing](#installing)\n - [Scaffolding](#scaffolding)\n   - [Initializing new app](#initializing-new-app)\n   - [Initializing config file](#initializing-config-file)\n - [Usage](#usage)\n   - [Import directive](#import-directive)\n   - [Compile](#compile) `-c`\n   - [Watch](#watch) `-w`\n   - [Debug](#debug) `-cd`, `-wd`\n   - [Autorun](#autorun) `-a`, `-ad`\n     - [Representative structure](#representative-structure)\n   - [HTML inclusion](#html-inclusion)\n   - [Advanced options](#advanced-options)\n   - [Conclusion](#conclusion)\n     - [Note for VIM Users](#vim-users)\n - [Config file](#config-file)\n   - [Config options](#config-options)\n     - [`folders`](#config-options-folders)\n     - [`exclude`](#config-options-exclude)\n     - [`vendors`](#config-options-vendors)\n     - [`bare`](#config-options-bare)\n     - [`packaging`](#config-options-packaging)\n     - [`expose`](#config-options-expose)\n     - [`minify`](#config-options-minify)\n     - [`httpfolder`](#config-options-httpfolder)\n     - [`release`](#config-options-release)\n     - [`debug`](#config-options-debug)\n - [Examples](#examples)\n - [API](#api)\n - [Contributing](#contributing)\n   - [Setup](#setup)\n   - [Building](#building)\n   - [Watching](#watching)\n   - [Testing](#testing)\n - [CHANGELOG](#changelog)\n\n<a name=\"installing\" />\n# Installing\n----\n\n`npm install -g coffee-toaster`\n\n<a name=\"scaffolding\" />\n# Scaffolding\n----\n\nThere are two simple `scaffolding` routines bundled with CoffeeToaster for\ncreating new projects structure from the scratch and also for creating the\nconfig `toaster.coffee` file for existent projects.\n\n<a name=\"initializing-new-app\" />\n## Initializing new app\n\nCoffeeToaster suggests a very simple structure for initial projects, you can\ncustomize it as you like.\n\n`toaster -n mynewapp`\n\nYou will be asked for some things:\n\n> source folder\n\nRelative folderpath to your source folder, default is `src`.\n\n> release file\n\nRelative filepath to your release file, default is `www/js/app.js`\n\n> http folder\n\nThe folderpath to reach your debug file through http, default is an `empty\nstring`. Imagine that the `www` is your root web folder, and inside of it you\nhave a `js` dir where you put your debug file. In this case you'd just need to\ninform 'js' as the http folder. It tells toaster *how to reach your debug js\nfile* starting from the `/` on your server.\n\nThis property is only for **debug**, your *release* file will not be affected.\n\n### Result\n\nConsidering all the default values, you'll end up with a structure as such:\n\n````\nmyawsomeapp/\n├── src\n├── vendors\n├── www\n    └── js\n└── toaster.coffee\n\n4 directories, 1 file\n````\n\n<a name=\"initializing-config-file\" />\n## Initializing config file\n\nYou can also initialize an existing project with a config `toaster.coffee` file\nsuch as:\n\n````\ncd existing-project\ntoaster -i\n````\n\nSome of the same information (`src`, `release` and `httpfolder`) will be\nrequired, answer everything according to your project's structure and a config\n`toaster.coffee` file will be created inside of it.\n\n<a name=\"usage\" />\n# Usage\n----\n\nToaster help screen.\n\n````\nCoffeeToaster\n  Minimalist build system for CoffeeScript\n\nUsage:\n  toaster [options] [path]\n\nExamples:\n  toaster -n myawsomeapp   (required)\n  toaster -i [myawsomeapp] (optional)\n  toaster -w [myawsomeapp] (optional)\n  toaster -wd [myawsomeapp] (optional)\n\nOptions:\n  -n, --new          Scaffold a very basic new App                   \n  -i, --init         Create a config (toaster.coffee) file           \n  -w, --watch        Start watching/compiling your project           \n  -c, --compile      Compile the entire project, without watching it.\n  -d, --debug        Debug mode (compile js files individually)      \n  -a, --autorun      Execute the script in node.js after compilation\n  -j, --config       Config file formatted as a json-string.           [string]\n  -f, --config-file  Path to a different config file.                  [string]\n  -v, --version                                                      \n  -h, --help \n````\n\n<a name=\"import-directive\"/>\n## Import directive\n\nThe import directive is known by:\n\n````coffeescript\n#<< app/views/user_view\n#<< app/utils/*\n````\n\nBy putting `#<< app/views/user_view` in your CoffeeScript file, you're telling\nCoffeeToaster that there's a dependency. It's like a `require`, except that you\ncan't save a reference of the imported file to a variable. Instead, this\ndirectives shoud be put in the first lines of your files.\n\nThis is how you organically tells Toaster about the specific ordering\noptions to be considered when all of your files get merged. Files imported this\nway will only be gracefully sorted out in your final output javascript so\nevery file is always **defined** before it's **needed**.\n\nWild cards `#<< app/utils/*` are also accepted as a handy option.\n\nIf you're writing a `class B` that will extends the `class A`, you shoud first\nimport the `class A` so it will be available for being extended by `class B`.\n\n* src/app/a\n\n````coffeescript\nclass A\n  constructor:->\n    console.log 'Will be used as base class.'\n````\n\n* src/app/b\n\n````coffeescript\n#<< app/a\nclass B extends A\n  constructor:->\n    console.log 'Using class A as base class'\n````\n\nThink of it as a glue that you use to chain all of your files appropriately.\n\n<a name=\"compiling\"/>\n## Compile\n\nCompile your project according your [config file](#config-file).\n\n````bash\ncd existing-project\ntoaster -c\n````\n\n<a name=\"watching\"/>\n## Watch\n\nStarts Toaster in watching'n'compiling mode:\n\n````bash\ncd existing-project\ntoaster -w\n````\n\nAny changes you make to your `src` files will trigger the `compile` action.\n\n<a name=\"debugging\"/>\n## Debug\n\nIn debug mode option `-d` all files will be compiled individually inside a\nfolder called `toaster` in the same directory you've pointed your debug file,\naiming to ease the debugging process.\n\n````bash\ntoaster -wd\ntoaster -cd\n````\n\nFor example, if you have `release/app-debug.js`, a folder will be created at\n`release/toaster` and all your CoffeeScript files will be compiled to Javascript\nwithin.\n\n<a name=\"representative-structure\"/>\n### Representative Structure\n\nBellow is a representative directory structure after compiling in debug mode.\n\n````\n/usage\n|-- src\n|   `-- app\n|       |-- controllers\n|       |   `-- users_controller.coffee\n|       |-- models\n|       |   `-- user_model.coffee\n|       `-- views\n|           `-- user_view.coffee\n|-- www\n|   `-- js\n|       |-- app-debug.js\n|       |-- app.js\n|       `-- toaster\n|           `-- app\n|               |-- controllers\n|               |   `-- users_controller.js\n|               |-- models\n|               |   `-- user_model.js\n|               `-- views\n|                   `-- user_view.js\n`-- toaster.coffee\n````\n\nEvery CoffeeScript file is compiled individually inside the `www/js/toaster`\ndirectory, so you can debug it sanely.\n\nThe debug file `www/js/app-debug.js` is the boot-loader responsible for loading\nall these individual compiled JS files into the right order.\n\n<a name=\"autorun\"/>\n## Autorun\n\nIn autorun mode option `-a` the script is recompiled after each file change and \nit is executed in a node.js child process. It is possible to use autorun in \ncombination with debug option `-d` to set the script breakpoint on the first line\n\n````bash\ntoaster -a\ntoaster -da\n````\nof if you like the `watch` option\n\n````bash\ntoaster -wa\ntoaster -wda\n````\n\nto better debug your application via node.js you can use some tools like \n[node-inspector](https://github.com/dannycoates/node-inspector)\n\nIt is also possible to pass arguments to the compiled script\n\n````bash\ntoaster -wa argument argument2 argument3\ntoaster -wda argument argument2 argument3\n````\n\nPlease note that the `-a` arguments has to be the last of the group in order to \nmake it work: `toaster -ad argument` will not behave as expected and\n`toaster -da argument` should be used instead\n\n<a name=\"html-inclusion\"/>\n## HTML inclusion\n\nSo in your `.html` you'll have two options:\n\n> 1) Include your release file.\n\n````html\n<script src=\"js/app.js\"></script>\n````\n \n> 2) Include the toaster boot-loader (your debug mode).\n\n````html\n<script src=\"js/app-debug.js\"></script>\n````\n\n<a name=\"advanced-options\"/>\n## Advanced options\n\nYou can pass your own config file for toaster instead of the default one\n`toaster.coffee`, with the `-f` or `--config-file` option:\n\n````bash\ntoaster -wdf config/mycustomconfig.coffee\n````\n\n*NOTE: It's important that you always call this from your project base folder,\notherwise the paths of your config can get messy. Remembers also that the paths\nin your config file shoud ideally be always relative to your project base\nfolder.*\n\nAlternativelly, you can even pass the whole configuration as a JSON string, with\nthe `-j` or `--config` option:\n\n````bash\ntoaster -wdj '{\"folders\":{\"src\":\"\"},\"expose\":\"window\",\"release\":\"app.js\",\"debug\":\"app-debug.js\"}'\n````\n\n*NOTE: The same above.*\n\n<a name=\"conclusion\"/>\n## Conlusion\n\nEvery time something changes, CoffeeToaster recompiles all of your application\nby:\n\n* collecting all .coffee files and processing everything, adding namespace's\ndeclarations to class definitions based on the folder they are located\n* reordering everything, always defining files and classes before they're needed\n* merge all yours vendors in the given order\n* declare root namespaces\n* merge everything\n\n<a name=\"vim-users\"/>\n### VIM Users\n\nDue to the way VIM handles files, you'll need to disable the creation of `swap`\nand `backup` files.\n\nTo do it, just put these three lines in your `.vimrc`:\n\n``` vim\n\" for coffee-toaster\nset nobackup       \" no backup files\nset nowritebackup  \" only in case you don't want a backup file while editing\nset noswapfile     \" no swap files\n```\n\nThis will guarantee the expected behavior of Toaster and make it play nicely\nwith VIM without any conflicts. For more info about why it's really needed,\nplease check this [thread](https://github.com/serpentem/coffee-toaster/issues/47).\n\n<a name=\"config-file\" />\n# Config file\n----\n\nThe `toaster.coffee` is the config file from where Toaster seek all information\nabout your app, vendores, build options and so on. There are two main usages\nyou can make of this file:\n\n* **1) Single source folder:**\n\nWhen all your code is bellow one single source folder your set up the main\n`toast` call passing the folder path directly.\n\n````coffeescript\n# src folder\ntoast 'src'\n\n  # excluded items (will be used as a regex)\n  exclude: ['folder/to/exclude', 'another/folder', '.DS_Store' ]\n\n  # packaging vendors among the code\n  vendors: ['vendors/x.js', 'vendors/y.js' ]\n\n  # gereral options (all is optional, default values listed)\n  bare: false\n  packaging: true\n  expose: '' # can be 'window', 'exports' etc\n  minify: false\n\n  # httpfolder (optional), release and debug (both required)\n  httpfolder: 'js'\n  release: 'www/js/app.js'\n  debug: 'www/js/app-debug.js'\n````\n\n* **2) Multi source folder:**\n\nWhen your code is splitted between two or more source folders you can set the\nmain `toast` call without any path, and inform your folders right bellow it.\n\n````coffeescript\ntoast\n  folders:\n    'src/my/app/folder': 'app'\n    'src/my/lib/folder': 'lib'\n    # ...\n````\n\n<a name=\"config-options\" />\n## Config options\n\nLet's take a closer look at all properties you can have in your `toaster.coffee`\nfile and what each one of these is responsible of.\n\n<a name=\"config-options-folders\" />\n### `folders`\n\n> Mandatory: `no` <BR/>\n> Type: `Object` <BR/>\n> Default: `null` <BR/>\n\nIn case you have more than one `src` folder, you can set an `object` of\n`objects` containing setup information about all your source folders, in the\nformat `'folderpath':'folderalias'`.\n\nThe **hash-key** is the `path` of your folder, and the **hash-value** is the\n`alias` you want to prepend to all files under that.\n\n*Pay attention to this specially when using Toaster with the '-j'\n[option](#advanced-options).*\n\nTo give an example, the equivalent use of this config:\n\n````coffeescript\ntoast 'src'\n  # ...\n````\n\nWould be:\n\n````coffeescript\ntoast\n  folders:\n    'src': ''\n````\n\n**NOTE: Aliases take effect only if the [`packaging`](#config-options-packaging)\nis set to `true`.**\n\nAliases lets you set a virtual top namespace to your source folder, if you have\n`src/app/app.coffee` which is a `class App`, you'll usually access it using\n`new app.App`.\n\nNow if you set an alias like `'src':'awesome'` the whole structure under your\nsource folder will be addressed under that `awesome` namespace and you need\nto prepend it when accessing your classes, i.e. `new awesome.app.App`.\n\n<a name=\"config-options-exclude\" />\n### `exclude`\n\n> Mandatory: `no` <BR/>\n> Type: `Array` <BR/>\n> Default: `[]` <BR/>\n\nLet's you excplicity exclude some folder, file or file type from Toaster\nsearch/process mechanism. The string you use here will effectively turn into\na RegExp like that:\n\n````coffeescript\nnew RegExp '.DS_store'\nnew RegExp '.swp'\nnew RegExp 'my/folder/to/be/excluded'\n````\n\n<a name=\"config-options-vendors\" />\n### `vendors`\n\n> Mandatory: `no` <BR/>\n> Type: `Array` <BR/>\n> Default: `[]` <BR/>\n\nYou can define vendors such as:\n\n````coffeescript\n  vendors: ['vendors/x.js', 'vendors/y.js', ... ]\n````\n\nIt's an ordered array of all your vendor's paths. These files must be purely\njavascript, preferably minified ones -- Toaster will not compile or minify them,\nonly concatenate everything.\n\n<a name=\"config-options-bare\" />\n### `bare`\n\n> Mandatory: `no` <BR/>\n> Type: `Boolean` <BR/>\n> Default: `false` <BR/>\n\nIf `true`, compile your CoffeeScript files without the top-level function safety\nwrapper:\n\n````javascript\n  (function() {\n    console.log('My peace of code!');\n  }).call(this);\n````\n\nSo you will end up with just `your peace of code`:\n\n````javascript\n  console.log('My peace of code!');\n````\n\n<a name=\"config-options-packaging\" />\n### `packaging`\n\n> Mandatory: `no` <BR/>\n> Type: `Boolean` <BR/>\n> Default: `false` <BR/>\n\nWhen packaging is `true`, Toaster will rewrite **all** your `class`\ndeclarations.\n\nIf you have a file in `src/app/models/user.coffee` with this contents:\n\n````coffeescript\nclass User\n````\n\nToaster will rewrite your declaration prepending a `namespace` to it, based on\nthe folder the class is located, resulting -- in this example -- into this:\n\n````coffeescript\nclass app.models.User\n````\n\nThis rewriting process is **saved** directly into your `file`. In case you move\nthis class to another folder, the prepended `namespace` will be rewrited again,\nalways following your folder structure.\n\nIn other words, your don't need to worry about hardcoded namespaces in your\nfiles, because Toaster will handle all the dirty for you.\n\n<a name=\"config-options-expose\" />\n### `expose`\n\n> Mandatory: `no` <BR/>\n> Type: `String` <BR/>\n> Default: `null` <BR/>\n\nIf informed, list all you packages of classes in the given scope. If you use\n`window` as your expose scope, your classes will be available also in the window\nobject -- or whatever scope you inform, suck as `exports` if you're building\nfor NodeJS.\n\nIn the end you'll be able to access your files throught this scope where your\nclasses was exposed.\n\n````coffeescript\nnew window.app.models.User\nnew exports.app.models.User\n````\n\n<a name=\"config-options-minify\" />\n### `minify`\n\n> Mandatory: `no` <BR/>\n> Type: `Boolean` <BR/>\n> Default: `true` <BR/>\n\nIf `true`, minify your release file using UglifyJS.\n\nDebug files are **never** minified.\n\n<a name=\"config-options-httpfolder\" />\n### `httpfolder`\n\n> Mandatory: `no` <BR/>\n> Type: `String` <BR/>\n> Default: `''` <BR/>\n\nThe folder path to reach your debug file through http, in case it is not inside\nyour root directory. Imagine that the `www` is your root folder and when you\naccess your webiste the `/` referes to this folder.\n\nInside this `www` folder you have another folder called `js` where you put all\nyour compiled js, resulting from a config like this:\n\n````coffeescript\ntoast 'src'\n  # ...\n  release: 'www/js/app.js'\n  debug: 'www/js/app-debug.js'\n````\n\nFollowing this case you'd just need to inform `js` as your http folder. Toaster\nwill use it to reach your **debug** files. For that, it will writes the\ndeclarations inside the `debug boot loader` following this location in order to\nimport your scripts properly when in debug mode, prepending your `httpfolder` to\nall file paths:\n\n````javascript\n// app-debug.js\ndocument.write('<scri'+'pt src=\"js/toaster/app.js\"></scr'+'ipt>')\n````\n\nWithout knowing that your JS files is under the `js` folder this path would be\nbroken.\n\n**NOTE: Your release file will not be affected by this property.**\n\n<a name=\"config-options-release\" />\n### `release`\n\n> Mandatory: `yes` <BR/>\n> Type: `String` <BR/>\n> Default: `null` <BR/>\n\nThe file path to your **release** file.\n\n<a name=\"config-options-debug\" />\n### `debug`\n\n> Mandatory: `yes` <BR/>\n> Type: `String` <BR/>\n> Default: `null` <BR/>\n\nThe file path to your **debug** file.\n\n<a name=\"examples\"/>\n# Examples\n----\n\nYou'll certainly find some useful resources in the examples provided.\nExamine it and you'll understand how things works more instinctively.\n\nInstall coffee-toaster, clone the usage example and try different config\noptions, always looking for the differences in your javascript release file.\n\n> [Single folder example](https://github.com/serpentem/coffee-toaster/tree/master/examples/single-folder)<BR>\n> [Multi folder example](https://github.com/serpentem/coffee-toaster/tree/master/examples/multi-folder)<BR>\n> [API example](https://github.com/serpentem/coffee-toaster/tree/master/examples/introspection)<BR>\n\n<a name=\"api\"/>\n# API\n----\n\nYou can use Toaster through API as well, in case you want to power up your\ncompiling tasks or even build some framework/lib on top of it.\n\nSee the API example for further information.\n> [API example](https://github.com/serpentem/coffee-toaster/tree/master/examples/introspection)\n\n````coffeescript\n  Toaster = (require 'coffee-toaster').Toaster\n  toasting = new Toaster [basedir], [options], [skip_initial_build]\n  toasting.build [header_code_injection], [footer_code_injection]\n````\n\n<a name=\"contributing\"/>\n# Contributing\n----\n\n<a name=\"setup\"/>\n## Setting everything up\n\nEnvironment setup is simple achieved by:\n\n````bash\n  git clone git://github.com/serpentem/coffee-toaster.git\n  cd coffee-toaster && git submodule update --init\n  npm link\n````\n\n<a name=\"building\"/>\n## Building\n\nBuilds the release file inside the `lib` folder.\n\n````bash\n  make build\n````\n\n<a name=\"watching\"/>\n## Watching'n'Compiling\n\nStarts watching/compiling using a previuos version of the CoffeeToaster itself.\n\n````bash\n  make watch\n````\n\n<a name=\"testing\"/>\n## Testing\n\nRun all tests.\n\n````bash\n  make test\n````\n\n<a name=\"changelog\"/>\n# Changelog\n----\n\n> [CHANGELOG.md](https://github.com/serpentem/coffee-toaster/tree/master/build/CHANGELOG.md)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/serpentem/coffee-toaster/issues"
  },
  "_id": "coffee-toaster@0.6.13",
  "_from": "coffee-toaster@"
}
